

EmployeeProjection.java:
************************

package com.example.employeemanagementsystem.projection;

public interface EmployeeProjection {

    Long getId();
    String getName();
    String getEmail();
    String getDepartmentName(); // Custom method to fetch related department name
}


__________________________________________________________________________________


DepartmentProjection.java:
*************************

package com.example.employeemanagementsystem.projection;

public interface DepartmentProjection {

    Long getId();
    String getName();
}


__________________________________________________________________________________


EmployeeDto.java:
*****************

package com.example.employeemanagementsystem.projection;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class EmployeeDto {

    private Long id;
    private String name;
    private String email;
    private String departmentName; // Custom field for department name
}


___________________________________________________________________________________


DepartmentDto.java:
******************

package com.example.employeemanagementsystem.projection;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class DepartmentDto {

    private Long id;
    private String name;
}


__________________________________________________________________________________


EmployeeRepository.java:
************************

package com.example.employeemanagementsystem.repository;

import com.example.employeemanagementsystem.model.Employee;
import com.example.employeemanagementsystem.projection.EmployeeProjection;
import com.example.employeemanagementsystem.projection.EmployeeDto;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.List;
import java.util.Optional;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {

    // Find employee by email
    Optional<Employee> findByEmail(String email);

    // Find all employees in a specific department with pagination and sorting
    Page<Employee> findByDepartmentId(Long departmentId, Pageable pageable);

    // Custom query using @Query annotation for pagination and sorting
    @Query("SELECT e FROM Employee e WHERE e.name LIKE %:name%")
    Page<Employee> findByNameContaining(@Param("name") String name, Pageable pageable);

    // Custom query to fetch specific fields using interface-based projection
    @Query("SELECT e.id AS id, e.name AS name, e.email AS email, d.name AS departmentName " +
           "FROM Employee e JOIN e.department d")
    List<EmployeeProjection> findEmployeeProjection();

    // Custom query to fetch specific fields using class-based projection
    @Query("SELECT new com.example.employeemanagementsystem.projection.EmployeeDto(e.id, e.name, e.email, d.name) " +
           "FROM Employee e JOIN e.department d")
    List<EmployeeDto> findEmployeeDto();
}


____________________________________________________________________________________________________________________________________



DepartmentRepository.java:
**************************

package com.example.employeemanagementsystem.repository;

import com.example.employeemanagementsystem.model.Department;
import com.example.employeemanagementsystem.projection.DepartmentProjection;
import com.example.employeemanagementsystem.projection.DepartmentDto;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import java.util.List;
import java.util.Optional;

public interface DepartmentRepository extends JpaRepository<Department, Long> {

    // Find department by name
    Optional<Department> findByName(String name);

    // Custom query to fetch specific fields using interface-based projection
    @Query("SELECT d.id AS id, d.name AS name FROM Department d")
    List<DepartmentProjection> findDepartmentProjection();

    // Custom query to fetch specific fields using class-based projection
    @Query("SELECT new com.example.employeemanagementsystem.projection.DepartmentDto(d.id, d.name) " +
           "FROM Department d")
    List<DepartmentDto> findDepartmentDto();
}


____________________________________________________________________________________________________________


EmployeeService.java:
*********************

package com.example.employeemanagementsystem.service;

import com.example.employeemanagementsystem.model.Employee;
import com.example.employeemanagementsystem.projection.EmployeeDto;
import com.example.employeemanagementsystem.projection.EmployeeProjection;
import com.example.employeemanagementsystem.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    public Employee saveEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    public Optional<Employee> getEmployeeById(Long id) {
        return employeeRepository.findById(id);
    }

    public Page<Employee> getAllEmployees(Pageable pageable) {
        return employeeRepository.findAll(pageable);
    }

    public Page<Employee> getEmployeesByName(String name, Pageable pageable) {
        return employeeRepository.findByNameContaining(name, pageable);
    }

    public void deleteEmployee(Long id) {
        employeeRepository.deleteById(id);
    }

    public List<EmployeeProjection> getEmployeeProjections() {
        return employeeRepository.findEmployeeProjection();
    }

    public List<EmployeeDto> getEmployeeDtos() {
        return employeeRepository.findEmployeeDto();
    }
}


________________________________________________________________________________________


DepartmentService.java:
************************


package com.example.employeemanagementsystem.service;

import com.example.employeemanagementsystem.model.Department;
import com.example.employeemanagementsystem.projection.DepartmentDto;
import com.example.employeemanagementsystem.projection.DepartmentProjection;
import com.example.employeemanagementsystem.repository.DepartmentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class DepartmentService {

    @Autowired
    private DepartmentRepository departmentRepository;

    public Department saveDepartment(Department department) {
        return departmentRepository.save(department);
    }

    public Optional<Department> getDepartmentById(Long id) {
        return departmentRepository.findById(id);
    }

    public List<DepartmentProjection> getDepartmentProjections() {
        return departmentRepository.findDepartmentProjection();
    }

    public List<DepartmentDto> getDepartmentDtos() {
        return departmentRepository.findDepartmentDto();
    }

    public void deleteDepartment(Long id) {
        departmentRepository.deleteById(id);
    }
}




